diff --git a/modules/dnn/src/caffe/caffe_importer.cpp b/modules/dnn/src/caffe/caffe_importer.cpp
index 50e1fbe93f..e6a393226f 100644
--- a/modules/dnn/src/caffe/caffe_importer.cpp
+++ b/modules/dnn/src/caffe/caffe_importer.cpp
@@ -51,6 +51,7 @@
 #include <google/protobuf/io/zero_copy_stream_impl.h>
 #include <google/protobuf/reflection.h>
 #include "caffe_io.hpp"
+#include <google/protobuf/port_def.inc>
 #endif
 
 #include <opencv2/core/utils/fp_control_utils.hpp>
@@ -595,6 +596,7 @@ Net readNetFromCaffe(const std::vector<uchar>& bufferProto, const std::vector<uc
                             bufferModelPtr, bufferModel.size());
 }
 
+#include <google/protobuf/port_undef.inc>
 #else  // HAVE_PROTOBUF
 
 #define DNN_PROTOBUF_UNSUPPORTED() CV_Error(Error::StsError, "DNN/Caffe: Build OpenCV with Protobuf to import Caffe models")
diff --git a/modules/gapi/include/opencv2/gapi/util/variant.hpp b/modules/gapi/include/opencv2/gapi/util/variant.hpp
index 48b55646c5..9b20a12b3e 100644
--- a/modules/gapi/include/opencv2/gapi/util/variant.hpp
+++ b/modules/gapi/include/opencv2/gapi/util/variant.hpp
@@ -132,7 +132,7 @@ namespace util
             static bool help(const Memory lhs, const Memory rhs) {
                 const T& t_lhs = *reinterpret_cast<const T*>(lhs);
                 const T& t_rhs = *reinterpret_cast<const T*>(rhs);
-                return t_lhs == t_rhs;
+                return static_cast<bool>(t_lhs == t_rhs);
             }
         };
 
diff --git a/modules/gapi/src/backends/fluid/gfluidcore.cpp b/modules/gapi/src/backends/fluid/gfluidcore.cpp
index 50615b2652..c19a19b462 100644
--- a/modules/gapi/src/backends/fluid/gfluidcore.cpp
+++ b/modules/gapi/src/backends/fluid/gfluidcore.cpp
@@ -32,6 +32,15 @@
 #include <cassert>
 #include <cstdlib>
 
+// Windows declares several inconvenient macro names.  We #undef them and then
+// restore them after
+#ifdef _MSC_VER
+#pragma push_macro("MM_MIN")
+#undef MM_MIN
+#pragma push_macro("MM_MAX")
+#undef MM_MAX
+#endif  // _MSC_VER
+
 namespace cv {
 namespace gapi {
 namespace fluid {
@@ -2582,6 +2591,12 @@ GAPI_FLUID_KERNEL(GFluidSqrt, cv::gapi::core::GSqrt, false)
 } // namespace gapi
 } // namespace cv
 
+// Restore macro that may have been #undef'd.
+#ifdef _MSC_VER
+#pragma pop_macro("MM_MIN")
+#pragma pop_macro("MM_MAX")
+#endif
+
 cv::GKernelPackage cv::gapi::core::fluid::kernels()
 {
     using namespace cv::gapi::fluid;
diff --git a/modules/highgui/src/window_w32.cpp b/modules/highgui/src/window_w32.cpp
index 32b2392904..c5ed2dc30d 100644
--- a/modules/highgui/src/window_w32.cpp
+++ b/modules/highgui/src/window_w32.cpp
@@ -654,11 +654,11 @@ double cvGetPropTopmost_W32(const char* name)
 
 static double getPropTopmost_(CvWindow& window)
 {
-    LONG style = GetWindowLongA(window.frame, GWL_EXSTYLE); // -20
+    LONG style = GetWindowLong(window.frame, GWL_EXSTYLE); // -20
     if (!style)
     {
         std::ostringstream errorMsg;
-        errorMsg << "window(" << window.name << "): failed to retrieve extended window style using GetWindowLongA(); error code: " << GetLastError();
+        errorMsg << "window(" << window.name << "): failed to retrieve extended window style using GetWindowLong(); error code: " << GetLastError();
         CV_Error(Error::StsError, errorMsg.str());
     }
 
diff --git a/modules/python/src2/hdr_parser.py b/modules/python/src2/hdr_parser.py
index fa2d0077d9..f7fe0a8b4b 100755
--- a/modules/python/src2/hdr_parser.py
+++ b/modules/python/src2/hdr_parser.py
@@ -70,6 +70,29 @@ class CppHeaderParser(object):
 
         return arg_str[npos2+1:npos3].strip(), npos3
 
+    def get_var_list(self, stmt):
+        balance = 0
+        npos = -1
+        while 1:
+            t, npos = self.find_next_token(stmt, ['<', '>', ',', ' '], npos + 1)
+            if npos < 0:
+                print("Error: no matching '>' in the var_list call at %s:%d" % (self.hname, self.lineno))
+                sys.exit(-1)
+            if t == '<':
+                balance += 1
+            elif t == '>':
+                balance -= 1
+            elif balance == 0:
+                break
+
+        var_list = [stmt[:npos]]
+        if t == ',':
+            return [stmt[:npos]] + stmt[npos + 1:].split(",")
+
+        var_list = stmt[npos:].split(",")
+        var_list[0] = stmt[:npos] + var_list[0]
+        return var_list
+
     def parse_arg(self, arg_str, argno):
         """
         Parses <arg_type> [arg_name]
@@ -166,20 +189,17 @@ class CppHeaderParser(object):
                     arg_type += w
                 continue
             elif w == "<":
-                arg_type += "_"
+                arg_type += w
                 angle_stack.append(0)
             elif w == "," or w == '>':
+                arg_type += w
                 if not angle_stack:
                     print("Error at %s:%d: argument contains ',' or '>' not within template arguments" % (self.hname, self.lineno))
                     sys.exit(-1)
-                if w == ",":
-                    arg_type += "_and_"
-                elif w == ">":
+                if w == ">":
                     if angle_stack[0] == 0:
                         print("Error at %s:%d: template has no arguments" % (self.hname, self.lineno))
                         sys.exit(-1)
-                    if angle_stack[0] > 1:
-                        arg_type += "_end_"
                     angle_stack[-1:] = []
             elif angle_stack:
                 arg_type += w
@@ -223,8 +243,6 @@ class CppHeaderParser(object):
         if add_star:
             arg_type += "*"
 
-        arg_type = self.batch_replace(arg_type, [("std::", ""), ("cv::", ""), ("::", "_")])
-
         return arg_type, arg_name, modlist, argno
 
     def parse_enum(self, decl_str):
@@ -420,11 +438,25 @@ class CppHeaderParser(object):
         npos = decl_str.find("CV_EXPORTS_AS")
         if npos >= 0:
             arg, npos3 = self.get_macro_arg(decl_str, npos)
+            if arg.startswith("get ") or arg.startswith("put ") or arg.startswith("get_default ") or arg.startswith("put_default "):
+                accessor = arg[:3]
+                func_modlist.append("/attr=prop" + accessor)
+                if arg.startswith("get_default ") or arg.startswith("put_default ") : func_modlist.append("/id=DISPID_VALUE")
+                arg = arg[len("get "):] if arg.startswith("get ") or arg.startswith("put ") else arg[len("get_default "):]
+                func_modlist.append("/idlname=" + arg)
+                arg = accessor + "_" + arg
             func_modlist.append("="+arg)
             decl_str = decl_str[:npos] + decl_str[npos3+1:]
         npos = decl_str.find("CV_WRAP_AS")
         if npos >= 0:
             arg, npos3 = self.get_macro_arg(decl_str, npos)
+            if arg.startswith("get ") or arg.startswith("put ") or arg.startswith("get_default ") or arg.startswith("put_default "):
+                accessor = arg[:3]
+                func_modlist.append("/attr=prop" + accessor)
+                if arg.startswith("get_default ") or arg.startswith("put_default ") : func_modlist.append("/id=DISPID_VALUE")
+                arg = arg[len("get "):] if arg.startswith("get ") or arg.startswith("put ") else arg[len("get_default "):]
+                func_modlist.append("/idlname=" + arg)
+                arg = accessor + "_" + arg
             func_modlist.append("="+arg)
             decl_str = decl_str[:npos] + decl_str[npos3+1:]
         npos = decl_str.find("CV_WRAP_PHANTOM")
@@ -598,7 +630,7 @@ class CppHeaderParser(object):
                     if eqpos >= 0:
                         a = a[:eqpos].strip()
                     arg_type, arg_name, modlist, argno = self.parse_arg(a, argno)
-                    if self.wrap_mode:
+                    if False:
                         # TODO: Vectors should contain UMat, but this is not very easy to support and not very needed
                         vector_mat = "vector_{}".format(mat)
                         vector_mat_template = "vector<{}>".format(mat)
@@ -659,10 +691,13 @@ class CppHeaderParser(object):
 
         the function will convert "A" to "cv.A" and "f" to "cv.A.f".
         """
-        if not self.block_stack:
-            return name
-        if name.startswith("cv."):
+        if (not self.block_stack) or name.startswith("cv."):
             return name
+        if name.startswith("."):
+            return name[1:]
+        if name.startswith("::"):
+            return name[2:]
+
         qualified_name = (("." in name) or ("::" in name))
         n = ""
         for b in self.block_stack:
@@ -754,7 +789,10 @@ class CppHeaderParser(object):
 
             if stmt.startswith("enum") or stmt.startswith("namespace"):
                 # NB: Drop inheritance syntax for enum
-                stmt = stmt.split(':')[0]
+                if stmt.startswith("enum"):
+                    stmt = stmt.split(':')[0].rstrip()
+                else:
+                    stmt = stmt.replace("::", ".")
                 stmt_list = stmt.rsplit(" ", 1)
                 if len(stmt_list) < 2:
                     stmt_list.append("<unnamed>")
@@ -790,8 +828,18 @@ class CppHeaderParser(object):
                 var_modlist = []
                 if "CV_PROP_RW" in stmt:
                     var_modlist.append("/RW")
-                stmt = self.batch_replace(stmt, [("CV_PROP_RW", ""), ("CV_PROP", "")]).strip()
-                var_list = stmt.split(",")
+                elif "CV_PROP_W" in stmt:
+                    var_modlist.append("/W")
+                else:
+                    var_modlist.append("/R")
+                stmt = self.batch_replace(stmt, [("CV_PROP_RW", ""), ("CV_PROP_W", ""), ("CV_PROP", "")]).strip()
+                if re.search(r"\bstatic\b\s*", stmt):
+                    var_modlist.append("/S")
+                    stmt = re.sub(r"\bstatic\b\s*", "", stmt)
+                if re.search(r"\bconst\b\s*", stmt):
+                    var_modlist.append("/C")
+                    stmt = re.sub(r"\bconst\b\s*", "", stmt)
+                var_list = self.get_var_list(stmt)
                 var_type, var_name1, modlist, argno = self.parse_arg(var_list[0], -1)
                 var_list = [var_name1] + [i.strip() for i in var_list[1:]]
 
